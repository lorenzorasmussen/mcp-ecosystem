name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify package version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Package version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi
          echo "✅ Package version matches tag version"

      - name: Run pre-release checks
        run: |
          npm run build
          npm run test:ci
          npm run docs:check

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract release notes from CHANGELOG.md
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          NEXT_TAG=$(git describe --tags --abbrev=0 $TAG_VERSION^ 2>/dev/null || echo "")
          
          if [ -n "$NEXT_TAG" ]; then
            sed -n "/^## \[${TAG_VERSION#v}\]/,/^## \[${NEXT_TAG#v}\]/p" CHANGELOG.md | head -n -1 > release-notes.md
          else
            sed -n "/^## \[${TAG_VERSION#v}\]/,\$p" CHANGELOG.md > release-notes.md
          fi
          
          # Remove the header line
          sed -i '1d' release-notes.md
          
          RELEASE_NOTES=$(cat release-notes.md)
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.release_notes.outputs.release_body }}
          draft: false
          prerelease: false

      - name: Publish to npm (if package is public)
        run: |
          # Only run if the package is public
          if [ "$(node -p "require('./package.json').private || false")" = "false" ]; then
            npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
            npm publish
          else
            echo "Package is private, skipping npm publish"
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update documentation
        run: |
          # If there's a documentation site, update it
          if [ -d "docs/_site" ]; then
            echo "Updating documentation site..."
            # Add documentation deployment commands here
          fi