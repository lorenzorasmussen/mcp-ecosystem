name: Advanced CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format

      - name: Run type checking if TypeScript is used
        run: npx tsc --noEmit || echo "TypeScript not configured"

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test -- --testPathPattern=integration

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          npm audit --audit-level=high
          npm audit --audit-level=critical

      - name: Run dependency check with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Documentation Quality
  documentation-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g markdownlint-cli2
          npm install -g write-good
          npm install -g markdown-link-check

      - name: Check markdown formatting
        run: markdownlint-cli2 "**/*.md" "#node_modules"

      - name: Check writing quality
        run: find . -name "*.md" -not -path "./node_modules/*" -not -path "./.pnpm/*" | xargs write-good

      - name: Check for broken links
        run: find . -name "*.md" -not -path "./node_modules/*" -not -path "./.pnpm/*" -exec markdown-link-check {} \;

  # MCP Integration Tests
  mcp-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run MCP-specific tests
        run: |
          if [ -f "tests/mcp-integration.test.js" ]; then
            npm run test -- tests/mcp-integration.test.js
          else
            echo "No MCP integration tests found, skipping"
          fi

  # Release Preparation
  release-prep:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan, documentation-quality, mcp-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine next version
        id: version
        run: |
          # Determine the next version based on commit types
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges --pretty=format:"%s")
          echo "Commits since last tag:"
          echo "$COMMITS"
          
          MAJOR=$(echo "$COMMITS" | grep -c "BREAKING CHANGE\|feat!:\|fix!:")
          MINOR=$(echo "$COMMITS" | grep -c "feat:")
          PATCH=$(echo "$COMMITS" | grep -c "fix:\|perf:\|refactor:")

          IFS='.' read -ra VERSION_PARTS <<< "${LAST_TAG#v}"
          V_MAJOR=${VERSION_PARTS[0]:-0}
          V_MINOR=${VERSION_PARTS[1]:-0}
          V_PATCH=${VERSION_PARTS[2]:-0}

          if [ $MAJOR -gt 0 ]; then
            NEXT_VERSION="$((V_MAJOR + 1)).0.0"
          elif [ $MINOR -gt 0 ]; then
            NEXT_VERSION="${V_MAJOR}.$((V_MINOR + 1)).0"
          elif [ $PATCH -gt 0 ]; then
            NEXT_VERSION="${V_MAJOR}.${V_MINOR}.$((V_PATCH + 1))"
          else
            NEXT_VERSION="${V_MAJOR}.${V_MINOR}.${V_PATCH}"
          fi
          
          echo "Next version: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Update package version
        run: |
          if [ "${{ steps.version.outputs.version }}" != "$(node -p "require('./package.json').version")" ]; then
            npm version ${{ steps.version.outputs.version }} --no-git-tag-version
            git add package.json package-lock.json
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git commit -m "chore(release): bump version to ${{ steps.version.outputs.version }}"
          fi

      - name: Create release tag
        if: steps.version.outputs.version != '0.0.0'
        run: |
          git tag "v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

  # Deployment (only for main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: release-prep
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production

      - name: Deploy to production
        run: echo "Deployment to production environment"
        # Add actual deployment commands here